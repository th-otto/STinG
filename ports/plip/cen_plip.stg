##===========================================================================
## File name:	CEN_PLIP.STG			Revised:	1998.02.12
## Author:	Ulf Ronald Andersson		Created:	1997.08.22
## Project:	Cen_PLIP			Version:	1.07
##---------------------------------------------------------------------------
## (c)1997 by:	Ulf Ronald Andersson		All rights reserved.
## Feedback to:	dlanor@oden.se			Released as FREEWARE
##---------------------------------------------------------------------------
## --- !!! ---  Please read the full text below at least once.  --- !!! ---
## This will help you avoid some simple but otherwise inescapable problems.
##===========================================================================
@if VERSION >= 6
@os Atari
@charset atarist
@inputenc atarist
@lang en
@endif
@database "Cen_PLIP STinG module documentation"
@options "+i -z"
@author "Ulf Ronald Andersson"
@define Version "1.19"
@$VER: Cen_PLIP.Hyp @:Version  (@:"__DATE__")
@subject "Documentation/System"
@width 78
@help "The Cen_PLIP module"


##---------------------------------------------------------------------------
@node "Main" "The Cen_PLIP module"
@alias "The Cen_PLIP module"
##---------------------------------------------------------------------------
The Cen_PLIP module                                                  Cen_PLIP
@line 1 77 0 0 7

 Documentation for Cen_PLIP.Stx version @:Version
 Created by Ulf Ronald Andersson

 @{U}Contents@{u}

 @{"Introduction to Cen_PLIP" LINK "Introduction to Cen_PLIP"}
 @{"Installation of Cen_PLIP" LINK "Installation of Cen_PLIP"}
 @{"Making a PLIP/PLEP cable" LINK "Making a PLIP/PLEP cable"}

 @{"cntrl_port interface" LINK "Cen_PLIP : cntrl_port interface"}
 @{"Development History" LINK "Cen_PLIP : Development History"}
 @{"Feedback" LINK "Cen_PLIP Feedback"}
@endnode


##---------------------------------------------------------------------------
@node "Cen_PLIP Feedback" "How to send reports, questions & suggestions"
##---------------------------------------------------------------------------
@next "Introduction to Cen_PLIP"
How to send reports, questions & suggestions                         Cen_PLIP
@line 1 77 0 0 7

 To contact me for questions/reports etc,
 the following means are available:

 @{"Ordinary \"Snail-mail\"" LINK "URAn_Snail_Mail"}
 @{"Ordinary phonecall" LINK "URAn_Phone_Number"}
 @{"Internet E-mail" LINK "URAn_Internet_Email"}

@endnode


##---------------------------------------------------------------------------
@pnode "URAn_Snail_Mail"
##---------------------------------------------------------------------------
 My "snail-mail" address is

        Ulf Ronald Andersson
        H”ders V„g 7
        S-14570 Norsborg
        Sweden

NB: The letters '”' and '„' in the street address
    are  swedish characters,  but may be replaced
    by 'o' and 'a' or even 'oe' and 'ae' instead.
@endnode


##---------------------------------------------------------------------------
@pnode "URAn_Phone_Number"
##---------------------------------------------------------------------------
 Since a dialog by mail is very slow,  some users
 (at least those in Sweden) may prefer to call me
 by phone, using the phone number below:

        08 - 53184105

 The first two digits are the area code for Stockholm,
 so foreign callers must remove the leading zero.
 (And of course start by dialling Sweden.)
@endnode


##---------------------------------------------------------------------------
@pnode "URAn_Internet_Email"
##---------------------------------------------------------------------------
 I can also be reached on the Internet,
 where I have the following addresses:
 
        mailto:dlanor@@oden.se
        http://www.oden.se/~dlanor/

The web page includes mail and ftp links,
so you can stay in the browser for that.
@endnode


##---------------------------------------------------------------------------
@node "Introduction to Cen_PLIP"
##---------------------------------------------------------------------------
@prev "Cen_PLIP Feedback"
Introduction to Cen_PLIP                                             Cen_PLIP
@line 1 77 0 0 7

Cen_PLIP.Stx is a STinG module which implements a  PLIP port compatible to
those used with  MintNet. (For which PLIP was invented.)  This now gives a
normal  ST  the possibility of using  much higher transfer speed for local
networking, thanks to the use of a parallel port.

The name of this port is "Centr. PLIP", and it is these 11 characters that
you must enter as 'port name' in  ROUTE.TAB to configure routes for  PLIP.
The name was chosen to remain unique if other PLIP drivers for other ports
are created, or if other drivers are made for the centronics port.

The effective speed is limited by other factors of course, so having a lot
of servers and clients constantly active may lower this efficiency, but no
port can be immune to this effect.  The STinG timeslice also affects the
rate at which packets are handed to clients, and thus the overall speed.

Using PLIP to connect my F030 via my TT030 (using Masque.Stx) to internet,
both machines supply their clients with data at  virtually the same speed.
The speed limit then is actually set by the modem, since PLIP is very much
faster than the 28K8 modem I have.

The full speed of  PLIP will only be utilized when using a direct network,
so that no modem imposes a lowered speed limit on any transfers.  Even an
unaccelerated ST will achieve  TCP  rates in excess of 4500 cps, and even
higher rates for simpler protocols.

To me, this makes local networking truly enjoyable, to a degree that could
never quite be matched using Midi, which is what I had to use before.  The
many  musicians that use  Ataris  should also welcome the ability to use a
fast networking port which does not interfere with their  Midi  equipment.

@endnode


##---------------------------------------------------------------------------
@node "Installation of Cen_PLIP"
##---------------------------------------------------------------------------
Installation of Cen_PLIP                                             Cen_PLIP
@line 1 77 0 0 7

PLIP.STX must of course be stored in the STinG module folder, with the rest.
Then you need to reboot so that  STinG  loads the new module so that you can
configure it, which is done in the usual way with STNGPORT.CPX

PLIP is a very simple protocol, identical to pure SLIP,  with the difference
of using a  parallel interface rather than a  serial one.   Because it is so
simple there is no need to configure anything  else than the  IP number, the
MTU size, and the activation flag.

To actually make  use of the port,  you must of course also edit your  route
file  ROUTE.TAB, to include at least one entry for the port  "Centr. PLIP".

For a  'slave' unit that needs to access a  'master' unit over PLIP so as to
get  indirect access to  internet (requires Masque.Stx), you do not need any
other entries than the one for  PLIP, which should then have  0.0.0.0 in all
the IP number/network fields.  Like this:

0.0.0.0         0.0.0.0         Centr. PLIP     0.0.0.0

For the master unit the "Centr. PLIP" entry needs to be a small subnet spec,
and could look like this:

1.0.255.0       255.255.255.0   Centr. PLIP     0.0.0.0

Remember that this line must come before the default route, used for the
internet connection, since the file may not be processed below that line.


There are two things which are noteworthy of the last example above:

1:  That network uses addresses which will not be used by internet.
    This means there can never be any conflict.

2:  You will need to use an IP address of the form 1.0.255.xxx  for any
    machine to be reached through this subnet entry.  This particularly
    includes the "PLIP" port of the  'slave'  unit, and it is advisable
    to use a related number for that on the  'Master'  unit too.

@endnode


##---------------------------------------------------------------------------
@node "Making a PLIP cable"
##---------------------------------------------------------------------------
Making a PLIP cable                                                  Cen_PLIP
@line 1 77 0 0 7

The necessary connections:
--------------------------

Essentially a PLIP cable is an RS232 cable with some lines unconnected, and
one pair of lines crossed (like in a null-modem).  Only 11 lines need to be
used, since lines 18-24 are duplicate ground lines.  I recommend using them
too, to minimize grounding problems, but that is up to you.

The necessary connections are specified as one connecting line per character
row in the diagram below:

        DB-25               DB-25
        Unit A              Unit B
    ---------------     ---------------
      pin   name          pin   name
      ---   ----          ---   ----
       1    STROBE         11   BUSY
       2    D0              2   D0
       3    D1              3   D1
       4    D2              4   D2
       5    D3              5   D3
       6    D4              6   D4
       7    D5              7   D5
       8    D6              8   D6
       9    D7              9   D7
      11    BUSY            1   STROBE
      25    GROUND         25   GROUND

Pins 12-17 should be unconnected, and pins 18-24 are extra grounds.

As you can see from the tables  above,  it is a very simple matter to make a
PLIP cable from a leftover RS232 flat-cable.  Just cut away lines 12 to 17
completely and simply cut lines 1 and 11 so you can cross connect them.
(Splice them with some of the surplus wire from lines 12 to 17 just removed)

NB: Remember that DB-25 connectors do *NOT* number the pins in the same
    order that they appear on a flat cable. The numbers given are all DB-25!
    So pins 1 and 2 are not adjacent in the cable, but have pin 14 between.

Important !!!  The lines to cut away are thus *NOT* a block of adjacent ones.


This was the easy way !  Now for the *BETTER* way.

Keep you RS232 cable intact and make a small adapter from two leftover DB-25
connectors instead.   This also gives you the opportunity to add  protection
for the main port driving chip (The PSG of your computer).  This helps avoid
damage when both ports are set as outputs with the cable connected.

NB:  This happens *EVERY* time both computers are switched on, or reset.

This protection simply consists of low value (not too low) resistors, placed
in series with each of the data lines.  I used 75 Ohm resistors.  If you use
lower resistors,  the protection is decreased,  but using much higher values
will interfere with signal transfer levels.  I advice 50-100 Ohms as limits.

The resistors together with normal circuit capacitance also form lowpass pi-
filters that help eliminate signal reflection and 'ringing',  to keep signal
logic levels reliable.

Regardless of which method you use,  do be  careful  to avoid shortcircuits,
and make sure everything gets properly isolated.   Any  damage you may cause
is your own responsibility, and since the PSG fills many important functions
(not just sound) in the computer, your system will not work without it.

I have myself let the cable remain connected  since I completed the adapter,
but you must choose what to do for yourself.  I am not responsible for that.

NB: Using a separate adapter, thus keeping your cables intact, allows you
    to also use the same cables for other things. Such as for example the
    normal RS232 ports, or the PLMP interface I plan to release shortly.
    (PLMP = Parallel Line Multidrop Protocol.)  The latter will require a
    different adapter from PLIP, but will use the same ports and cables.

@endnode


@node "Cen_PLIP : cntrl_port interface"
Cen_PLIP : @{"cntrl_port" LINK "The `cntrl_port' Function"} interface                                    STinG
@line 1 72 0 0 7

This Cen_PLIP version was developed for the STinG kernel Beta releases in
the summer of 1998, and it will therefore not work properly with any of
the older kernels. This is the case for all port drivers, since the driver
structure has been changed to include a new function used by the kernel to
implement the new @{"API" LINK "API"} function '@{"cntrl_port" LINK "The `cntrl_port' Function"}' for safe access to port data.

Cen_PLIP currently supports the following @{"cntrl_port" LINK "The `cntrl_port' Function"} opcodes:

CTL_GENERIC_SET_IP      =>  Set IP number of the port
CTL_GENERIC_GET_IP      =>  Get IP number of the port
CTL_GENERIC_SET_MTU     =>  Set MTU size of the port
CTL_GENERIC_GET_MTU     =>  Get MTU size of the port
CTL_GENERIC_GET_MMTU    =>  Get Max MTU size of the port
CTL_GENERIC_GET_TYPE    =>  Get port link type of the port
CTL_GENERIC_GET_STAT    =>  Get port transfer statistics
CTL_GENERIC_CLR_STAT    =>  Clear port transfer statistics

These functions are very tolerant of input data, so they accept almost any
values, even if these will not give functional results.  This means it is
the responsibility of the calling program to avoid nonfunctional values !

Error codes possible:

E_PARAMETER will result if anyone calls the cntrl function in the driver
without setting up the port pointer like the kernel does.  That will not
happen if you call the '@{"cntrl_port" LINK "The `cntrl_port' Function"}' @{"API" LINK "API"} function correctly, because then
the kernel will find the port structure itself. (You use the port name.)

E_PARAMETER will result if CTL_GENERIC_SET_MTU is called with an MTU value
that is higher than the maximum allowed for the port (8192).

E_FNAVAIL will result if any opcode other than those listed above are used.
@endnode


##---------------------------------------------------------------------------
@node "Cen_PLIP Development History"
##---------------------------------------------------------------------------
Cen_PLIP Development History                                         Cen_PLIP
@line 1 77 0 0 7

 @{U}Version@{u}        @{U}Details@{u}

 1.19       1999 October 10
        Finally it seems that the PLIP driver for STinG works
        the way it should.  At least it has not failed for me
        yet, and judging from the ease of operation this does
        seem to run reliably now.  So I will release this now.
        Please report any problems with it to me ASAP.

 1.12-1.18  1999
        After discovering that none of the previous versions
        worked as intended, I almost dropped this project, but
        continued working on it without releases, due to innate
        inability to give up.  (What ?  Me stubborn...?  ;-)

 1.11       1998 December 14
        Some small changes in the source plus a major correction
        of one macro library motivate this release.  The bug in
        the macro library (due to translation from PASM dialect)
        does explain some of the problems encountered before.

 1.10       1998 September 8
        Some problems still remain, but a new release is still
        necessary due to changes in the STinG kernel. It has
        also been discovered that PASM could not cope with all
        the needs of the macro libs due to its 1-pass design.
        All source code (incl all libs) have therefore now been
        translated to DevPac dialect.

 1.09       1998 May 24
        The problems of 1.08 have now been debugged (I hope ;-),
        and this resulting version now runs well on my systems.
        The speed has been raised to an average of 9000 cps for
        most networking, with peaks of appx twice that speed. As
        before, these figures relate to communication between a
        Standard Falcon and a 16 MHz ST.  Other system speeds
        will naturally affect any results of your own.

 1.08       1998 March 31
        This version was an attempt to raise speed and safety by
        restructuring the interrupt code (again).  Results were a
        bit dubious though, so this version was not released.

 1.07       1998 February 12
        After 48 hours nearly continuous work at speed optimization
        this version has now achieved bulk transfer rates averaging
        at 6100 cps (equivalent to serial 61000 bps), when browsing
        from a 16 MHz Mega ST4 running CAB 2.7 + CAB.OVL 1.2805 to
        access pages/files on a 16 MHz falcon running SHTTPD 2.2.
        This is good enough to release, though I still expect more!


 1.06       1998 February 10
        After some necessary STinG Kernel improvements last November
        the PLIP module lost all reliability.  It has been a long
        struggle to get it back online, but here it is, the first
        Cen_PLIP version running perfectly under the latest STinG.
        This was achieved at cost of speed though, so this version
        is not released.  Who wants PLIP at 1000 cps...?  :-(

 1.05       1997 October 25
        Added module basepage pointer to DRIVER structure.
        This is a new standard defined to ease debugging.


 1.04       1997 October 13
        Rewritten to use a new form of interupt masking, to improve
        transfer rates and decrease errors due to kernel interrupts
        interfering with PLIP timing.

        Renamed to "Centr. PLIP" with filename "CEN_PLIP.STX", after
        long discussions with Peter on naming conventions. This will
        not collide with any future port.


 1.03       1997 September 13
        Rewritten to take advantage of the new capabilities of the
        latest STinG kernel to allow kernel routines to be called
        from hardware interrupts.  This removes an unpleasant limit
        on the number of packets tranferred per timeslice.  Even an
        unspeeded ST can expect TCP rates in excess of 4500 cps now.
        (Tested with MTU=576, MSS=536. Higher values = higher speed)

 1.02       1997 August 25
        A bug that sometimes locked up the system has been killed.
        This is the first proper release version, and test runs on
        it include bidirectional 'Pinging' of 4500 datagrams.
    NB: No tests have yet been made with 'partners' using MintNet,
        so reports on results with such would be appreciated.

 1.01       1997 August 22
        The fatal bug mentioned below has been exterminated.
        The statistics counter for dropped packets is corrected.
        Statistics counters for sent/received data are implemented.
        The document is now in ST-Guide hypertext format.

 1.00       1997 August 22
        First functional version, with one FATAL bug that could
        kill unrelated MFP interrupts...

 0.xx       1997 August 18-21
        Project start and various experiments

@endnode
