#
# VAR = VALUE           : standard format
#
#   Lines beginning with '#' or any nonprintable character are ignored.
#   They don't even consume any memory.
#
#   The variable names are not case sensitive.
#   Values may be case sensitive depending on usage.  Watch out for 
#   unintentional blanks at the end of a string value.
#
#   Some variables may be specified twice or more often (like the
#   PHONE_NUMBER).
#
#
#
# Configuration part of script file
#
#
#   This variable determines if the Dialer terminates after the last
#   window has been closed. If set to zero, the Dialer terminates 
#   automagically after the user closed all windows. Set to one, the
#   variable causes the Dialer to stay in an event loop, waiting for
#   AC_OPEN or dialing request messages. AC_OPEN causes the Dialer to
#   reopen the main window.
#
RESIDENT = TRUE
#
#
#   Line protocol for IP packets to be used :
#        0 = SLIP
#        1 = PPP
#   For CSLIP, set this to 0, and activate Van Jacobson Header 
#   Compression.
#
PROTOCOL = 1
#
#
#   If you use PPP, your ISP might require password authentication
#   via PAP (Password Authentication Protocol).  If so, enter here
#   the ID ("account", "user name") and the password.
#
PAP_ID       = user
PAP_PASSWORD = secret
#
#
#   If you consider it unsafe to save your password in a file (which
#   is quite a reasonable thought), you can make the Dialer prompt you
#   for the password each time you log in.  Your password is safe then
#   as it is not stored in any file.  If you use PPP, set PAP_PROMPT
#   to TRUE, in order to enable this.  For a script based login, you
#   must use the $PASSWD keyword to achieve this, see also the script 
#   section for details.
#
PAP_PROMPT = FALSE
#
#
#   Should Van Jacobson Header Compression be used ?
#        FALSE = No
#        TRUE  = Yes
#   VJHC together with PROTOCOL = 0 defines CSLIP.
#
VJHC = FALSE
#
#
#   Socket to be used when Serial 2 / LAN is selected.
#        FALSE = Serial (RS 232 compatible) socket
#        TRUE  = LAN (RS 422 compatible) socket
#
LAN_PORT = FALSE
#
#
#   Your username and hostname.
#
#   HOSTNAME is the hostname of your computer for this session.  If
#   your address is dynamically allocated, HOSTNAME will be wrong.
#   For now, just set it to your providers hostname (or whatever). 
#   Try to make it reasonably accurate if possible.
#
#   USERNAME doesn't make much sense either until I have an identd
#   working.  So it doesn't really matter what it is.  When I do have
#   an identd, this will be your `valid' username for incoming queries.
#
#   FULLNAME is pretty obvious, right ?
#
USERNAME = perot
HOSTNAME = modserv.stud.uni-hannover.de
FULLNAME = Peter Rottengatter
#
#
#   State here which IP address you're gonna use. If you got a permanent
#   address from your ISP, put it in here. If you get a new address each
#   time you log in, then use 0.0.0.0 here (this is irrelevant for SLIP,
#   but essential for PPP !)
#
CLIENT_IP = 0.0.0.0
#
#
#   Your ISP probably imposes a limit to the size of IP packets
#   (Maximum Transfer Unit).  Many ISPs use the standard Ethernet 
#   MTU of 1500 bytes.  576 is safe in any case, however.
#
MTU = 576
#
#
#   If you want to use IP masquerading to hook your LAN to the Internet
#   while your ISP provides only one IP address, set this variable to
#   TRUE.  Better don't touch it if you never heard of masquerading before.
#
MASQUERADE = FALSE;
#
#
#   The NAMESERVER (ie: DNS or Domain Name Server) *must* be set,
#   preferably to a name server that your provider recommends.  Note :
#   The address must be a dotted quad, that is, four decimal numbers
#   separated by dots.  The mnemonic name will not work, as again a
#   name server would be needed to resolve it.  Put IP addresses of
#   all up to five name servers here, just preparing for the case your
#   favourite name server is down.  Note PPP can fetch the name server
#   addresses automagically, if your ISP allows this.  Still for SLIP
#   the name servers *must* be specified *here* (remove the '#').
#
#NAMESERVER = 130.75.1.32
#NAMESERVER = 130.75.1.40
#
#
#   Some ISPs can supply the name server automatically if requested
#   by the client's PPP implementation. The NAMESERVER variable can
#   be ignored in that case, and FETCH_DNS set to TRUE. Setting it
#   to TRUE anyway doesn't hurt if you do not run a LAN; however in
#   a LAN you possibly run into trouble, thus it is off here.
#
FETCH_DNS = FALSE
#
#
#   Port of your computer to be used for the modem connection.
#   Look in the 'Miscellaneous' part of the CONFIG form for
#   available choices.  Spelling must be the same here.  Unvalid
#   names revert to Modem 1.
#
SERIALPORT = Modem 1
#
#
#   Port parameters to be used for the login stage.  8N1 is used
#   normally, but CompuServe requires 7E1.  Setting CIX_LOGIN to
#   TRUE causes the Dialer to log in using 7E1.
#
CIX_LOGIN = FALSE
#
#
#   Phone Number(s).  PHONE_NUMBER = number.  Some providers
#   have more than one number you can dial.  You can specify
#   up to eight phone numbers here.  Specify none if you use a
#   leased line.
#
PHONE_NUMBER = 0511-7629993
#
#
#   File describing the telephone fee structure of your telephone
#   company.  The file must be in the same directory as this script
#   file.
#
FEE_FILE = LOCAL.FEE
#
#
#   These parameters describe what the ISP charges for Internet
#   access. Some ISP charge for time only, some for transferred
#   data, some for a combination of both. Some even discriminate
#   between sent and received data.
#
#   Each entry consists of the unit (of time, or data), and the
#   corresponding cost. The unit may be followed by an 's', 'm' or
#   'h' for seconds, minutes and hours in case of time, or 'K' or
#   'M' for KBytes (1024 bytes) and MBytes (1048576 bytes) in case
#   of transferred data. The cost unit (Dollar '$', Deutsche Mark
#   'DM') is specified in FEE_FILE.
#
ISP_TIME  = 72s, 0.07
ISP_SENT  = 12K, 0.03
ISP_RECVD = 84K, 0.09
#
#
#   Set this to TRUE if you have only one machine to be connected 
#   to the Internet. You need every IP packet to be sent to the 
#   ISP's host, thus a default route should be created. Setting this 
#   to TRUE causes the Dialer to do this.
#
DEF_ROUTE = TRUE
#
#
#   If this is set to TRUE, the file specified by the LOGIN_BATCH
#   variable (set either in DEFAULT.CFG or the network environment)
#   is treated as a batch file and executed after login. The file
#   contains lines that specify a binary (complete path) and a
#   set of commandline parameters, all separated by spaces.
#
EXEC_BATCH = FALSE
#
#
#   Setting this variable to TRUE causes the Dialer to write debug
#   info about the connection initialization to disk.
#
DEBUGGING = FALSE
#
#
#
# Connection part of script file
#
#
#   This part is initialising the modem, dialing a remote system
#   and establishing a connection to a remote modem.
#
#   INIT sets the string you can use to initialise the modem.
#
INIT = ATZ
#
#
#   PREFIX sets the dial prefix (ie: ATD, ATDT, ATDP, whatever else
#   is needed to get a dial tone)
#
PREFIX = ATDT
#
#
#   Then you should define how to hangup your modem, i.e. which 
#   command is to be used to shut down a connection.  The dialer
#   will use the DTR signal to hangup the modem if HANGUP = DTR is
#   set.  Otherwise set HANGUP to the appropriate hangup string 
#   for your modem.  A comma forces the dialer to wait a second.
#   Normally a pause, three '+' characters and another pause cause
#   a modem to revert to command mode, then 'ATH' can be issued.
#
HANGUP = ,+++,ATH
#
#
#   The dialing parameters are CONNECT_WAIT and REDIAL_DELAY.  These
#   are times in seconds.  CONNECT_WAIT is the amount of time to wait
#   for a connection after dialing a number.  REDIAL_DELAY is the amount
#   of time to wait in between dial attempts.
#
CONNECT_WAIT = 60
REDIAL_DELAY = 20
#
#
#   Connection success can be determined either by detecting the
#   modems Carrier Detect signal (SUCCESS = CDWAIT), or waiting 
#   for a CONNECT response (SUCCESS = CONNECT) from the modem.
#   Failure can be determined by a timeout or a modem response
#   such as NO CARRIER or BUSY.  NO DIALTONE generally means a
#   serious problem like the modem not being connected to the
#   telephone line, so that an immediate redial is not a sensible
#   reaction.  The dialer will be halted instead.  Up to three 
#   test words of each kind can be set.
#
#   The SUCCESS = DIRECT has a special meaning.  If specified, the
#   dialer will skip the dialing part, moving on to the script
#   execution straight away.  This is handy for doing connects on
#   serial lines connected directly to a host (without modem), or
#   on leased lines.
#
#   Make sure your modem is configured correctly in order to get
#   the connection speed shown in the dialing window.  It's also
#   advisable to use only one SUCCESS string (the one after which
#   the modem sends the connection speed).
#
SUCCESS = CARRIER
SUCCESS = CONNECT
SUCCESS = CDWAIT
FAILURE = BUSY
FAILURE = NO CARRIER
ABORT   = NO DIALTONE
#
#
#
# Login part of script file
#
#
#   This part is to log into the remote computer.  This will probably
#   involve entering a username and password, selecting SLIP mode,
#   and reading the Internet Address that your system will have for
#   the duration of the session.
#
#   This variable determines how many seconds the script interpreter 
#   will wait for the FIND strings to be received. If the FIND times 
#   out, script execution will be aborted and a hangup and redial will 
#   be initiated.
#
FIND_TIMEOUT = 60
#
#
#   The beginning of the script part is denoted by the DIAL_SCRIPT
#   keyword.
#
DIAL_SCRIPT
#
#
#   The STinG dialer uses the standard `conversational' method for
#   login to the provider.  This involves searching for certain
#   words and sending an appropriate response.  The special
#   response $GET_IP is used to read the IP address that your
#   provider has assigned you for this session.  If your provider
#   has allocated you a permanent IP Address, then you should set
#   it using the CLIENT_IP keyword (see above) and NOT use $GET_IP.
#
#   Another special response keyword is $PASSWD.  You can use it
#   instead of your real password.  Once the Dialer reaches that
#   point, it will prompt you for the password to be sent.  This
#   way you can avoid storing your real password in this file, as
#   TOS compatible machines do not deal with security issues.
#
#   Each step of the `conversation' is specified as a FIND line,
#   a REPT line, a WAIT line, and a RESP line.  There can be up to
#   32 steps.  Each FIND *must* have a matching REPT, RESP and WAIT,
#   even if they have no value.  This is because values are put into
#   arrays in the order they appear.
#
#   WAIT is the time in milliseconds to pause before each REPT/FIND/RESP
#   For accuracy, the time should be a multiple of 5 (i.e.: a WAIT = 4
#   would result in a pause of 0.  WAIT = 12 would be 10).
#
#   REPT specifies a string that is sent repeatedly while searching
#   for the FIND string.  Particularly older systems might require
#   initial CRs sent, in order to trigger the login.
#
#   By default each RESP line is sent with a carriage return
#   character at the end.  If you need to use a line feed character
#   instead then put a | at the end of the line, or a \ in order to 
#   use an ESC character.  This only works if the | or \ is the last 
#   character of the line.  A / character at the end of a line means 
#   carriage return, but this is the default, so you don't need it.
#
#   If you want to send just a Carriage Return, then use RESP = /
#   If you want to send just a Linefeed, then use RESP = |
#   If you want to send just a ESC, then use RESP = \
#
#   Note that if neither REPT, FIND or RESP have a value, they are
#   ignored, but in this case the WAIT (if any) will still pause.
#   If FIND has no value but RESP does, the value of RESP will be
#   sent immediately after the WAIT time.  No REPT string will be
#   sent in that case.  If FIND has a value but RESP does not, then
#   after the FIND the REPT repetition will cease and the dialer will
#   move straight on to the next WAIT / REPT / FIND / RESP.
#
#   Here is an example.  Note most ISPs allow to not use any script
#   at all if using PPP (PAP-ID and PAP-Password - see above - are 
#   used for authentication then).  Therefore this example script
#   is disabled.  To put it to work, just remove the comments ('#')
#   in front of the lines.
#
#WAIT = 500
#REPT = /
#FIND = Username:
#RESP = YourUsernameHere
#
#WAIT = 500
#REPT =
#FIND = Password:
#RESP = $PASSWD
#
#WAIT = 500
#REPT =
#FIND = prompt
#RESP = slip
#
#WAIT = 500
#REPT =
#FIND = Your IP address is
#RESP = $GET_IP
#
