

@node "STinG Modules"
@prev "STinG Modules"
STinG Modules                                                      STinG
@line 1 72 0 0 7


  Low level port driver modules :

     @{"SERIAL.STX" LINK "SERIAL.STX : Serial Line Networking"}
     @{"CEN_PLIP.STX" LINK "CEN_PLIP.STX : Connect Networks Instead of Printers"}
     @{"ETHER.STX" LINK "ETHER.STX : Heyyya, This is Fast !"}
     @{"MIDI.STX" LINK "MIDI.STX : Musical Networking"}
     @{"LCLTLK.STX" LINK "LCLTLK.STX : Atari Bites the Apple"}
     @{"MASQUE.STX" LINK "MASQUE.STX : Carnival on the Net"}


  High level protocol modules :

     @{"TCP.STX" LINK "TCP.STX : Transmission Control Protocol"}
     @{"UDP.STX" LINK "UDP.STX : User Datagram Protocol"}
     @{"RESOLVE.STX" LINK "RESOLVE.STX : The DNS-Resolver"}

@endnode


@node "SERIAL.STX : Serial Line Networking"
SERIAL.STX : Serial Line Networking                                STinG
@line 1 72 0 0 7

The driver SERIAL.STX supplies driving code for all serial ports 
on Atari computers. It recognizes all standard ports from ST, STE, 
Mega STE, TT and Falcons. The Midi port is treated as a serial 
port too. All additional port hardware, provided OS-level drivers 
are installed into BIOS and an RSVF descriptor exists, is recognized 
too and can be used just like the standard ports. BIOS and RSVF 
installation is done by the HSMODEM drivers, for instance.

The names of the standard ports are as follows :
XXXX ST     :   "Modem 1", "Midi"
1040 STE    :   "Modem 1", "Midi"
Mega STE    :   "Modem 1", "Modem 2", "Ser.2/LAN", "Midi"
TT          :   "Modem 1", "Modem 2", "Serial 1", "Ser.2/LAN", "Midi"
Falcon      :   "Modem 1", "Modem 2", "LAN", "Midi"
Note that you need to do a little hardware work to be able to use 
Modem 1 on a Falcon. The Falcon port that is labeled "Modem" on the 
case is "Modem 2".

If this driver is to be used under a TOS version that does not support 
Bconmap() in XBIOS (if you use a TOS 1.x then this is most probably 
the case) then HSMODEM or an equivalent package *must* be installed. 
To check for this, simply have STinG load this driver, and look into 
the STNGPORT.CPX, or run ConfSTinG from the desktop, or check whether 
Modem 1 is there. Modem 1 should be shown available on every machine, 
even the Falcon. If it isn't on yours, you must install HSMODEM.

If you want to use Midi for serial point to point networking then you 
must install HSMODEM too. Note that you won't find a Midi entry in 
STNGPORT.CPX or ConfSTinG if you haven't got HSMODEM installed. Do not 
confuse this with MidiNet, which is a Midi based ring network that 
brings it's own driver, as HSMODEM MIDI.PRG can't be used for it.

If HSMODEM is used on a TT or Mega STE to control the SCC ports 
("Modem 2" and "Ser.2/LAN") then the HSMODEM SCC.PRG variable "LANBIT" 
should be set to "Yes".

@endnode


@node "CEN_PLIP.STX : Connect Networks Instead of Printers"
CEN_PLIP.STX : Connect Networks Instead of Printers                STinG
@line 1 72 0 0 7

This module is not available yet for this kernel version.

@endnode


@node "ETHER.STX : Heyyya, This is Fast !"
ETHER.STX : Heyyya, This is Fast !                                 STinG
@line 1 72 0 0 7

This module only contains dummy code as yet. I'm working on a module
supporting LANCE based Ethernet adapters.

@endnode


@node "MIDI.STX : Musical Networking"
MIDI.STX : Musical Networking                                      STinG
@line 1 72 0 0 7

This module only contains dummy code as yet. I always wanted to do
real networking with the Atari's Midi ports, by connecting many
machines in a ring shaped network. No time to work on it right now,
though.

@endnode


@node "LCLTLK.STX : Atari Bites the Apple"
LCLTLK.STX : Atari Bites the Apple                                 STinG
@line 1 72 0 0 7

This module only contains dummy code as yet. It's been an early 
suggestion by Dan Ackerman. Nobody is working on it right now.

@endnode


@node "MASQUE.STX : Carnival on the Net"
MASQUE.STX : Carnival on the Net                                   STinG
@line 1 72 0 0 7

 Documentation for Masque.Stx version 1.08
 Created by Ulf Ronald Andersson

 @{U}Contents@{0}

 @{"Introduction to Masque" link "Masque : Introduction"}
 @{"Configuring Masque" link "Masque : Configuration"}
 @{"Installation of Masque" link "Masque : Installation"}
 @{"Masque Development History" link "Masque : Development History"}
 @{"Masque Feedback" link "Credits and Copyright"}

@endnode


@node "Masque : Introduction"
Masque : Introduction                                              STinG
@line 1 72 0 0 7

Masque.Stx is a STinG module which implements IP masking, so that all of 
the computers on a local network can access internet through a single 
connection of one of them.  More than one of those computers may have 
Masque installed, but only linked to ports that are either passive, or 
connected to internet (or another intranet).

For example:

I only have one reasonably fast modem (and only one phoneline), which is
normally connected to my Mega ST4.  I also have an STE 4160 which has no
modem, but is linked to the Mega ST through Midi. Using Masque I can now
use both computers in parallel to access internet, with normal STiK/STinG
clients such as CAB, Newsie, PopWatch etc.  (All should work.)

News !!!
--------
From version 1.10 of Masque the machine which is doing the masking is now
treated a little differently from other machines on the local net.  This
means it can receive connections from clients on Internet to any servers
running on this local machine.

@endnode


@node "Masque : Configuration"
Masque : Configuration                                             STinG
@line 1 72 0 0 7

Configuring Masque has recently become a lot easier,  because it is fully
supported by the STinG Dialer.  This means that you do not need to change
the ROUTE.TAB file to add a Masquerade entry any more. Instead the Dialer
will edit the corresponding route tables in  memory,  as and when needed,
including restoring the routes  after disconnecting.  Thus you can forget
this aspect of Masque configuration from now on.

Even so, to get any benefit from Masque you must have a functional local
network with properly defined ROUTE.TAB files on each of its machines.

Here are some examples and important rules concerning this:

I use the Midi and Plip drivers for local networks and my subnet route
(on a line above the default route) for Midi looks like this:
1.1.2.0		255.255.255.0	Midi		0.0.0.0

On each of the computers using this subnet I have set up the Midi ports
to use the IP addresses 1.1.2.x, with 'x' standing for an arbitrary
machine number unique to each computer in the subnet.

The IP addresses will only be used locally, which is why you can choose
arbitrarily,  but if you use any that correspond with real addresses on
Internet you will  not be able to access those real addresses even when
connected to Internet, since STinG's router will use the local ones.

On a very simple network the machines not connected to the dial-up modem
can manage with a single default route allowing them to reach the modem-
connected machine, and such a route should then look like this:
0.0.0.0		0.0.0.0		Midi		0.0.0.0 

But the modem-connected machine _must_ have the local route defined as a
subnet  (see further above)  since its default route after  dial-up will
lead to Internet  (via Masquerade port and modem port).  If you only use
a  default route on this machine too,  then contact with the other local
machines will be lost during dial-up connections.

And remember that default routes (with all those zeroes) must be placed
after any  subnet route definitions,  because  routing is done from the
top down in ROUTE.TAB,  so stuff below the default route is never used.

Using a simple default route without other subnets,  like above,  means
that all packets addressing ports on other computers  will be sent over
Midi in the hope that whoever receives it will be able to pass it on to
someone else etc, in such a way that it eventually does reach the final
recipient through an unknown number of intermediaries.

This routing is naturally done in the same way,  regardless of whether
the packets originated on the local machine or arrived on some port...

In case you didn't know it, this is what IP networking is all about.  ;-)

(Don't laugh guys!  Many smart Internet users have no idea how it works.)


Masque itself is implemented as a STinG port driver, and will therefore
appear in the port list of STNGPORT.CPX, and is configurable from any
modern version of this, or of the dialer.  Modern here means STinG
release 1.08 from late 1997, but newer releases have been made since,
so get those to make sure you have the latest and best drivers.

Settings in the Dialer as usual override any CPX settings when Dialer
establishes a connection, so normally the pseudo port 'Masquerade'
should not be enabled 'manually' in STNGPORT.CPX .  Instead you should
select masquerading in the 'Miscellaneous' section in the 'Configs'
dialog of the Dialer.

Having installed Masque.Stx properly,  you must of course still reboot
the system so as to load the new module in order to configure it. This
can not be done properly without having STinG load it first,  so do it
before proceeding.

Actually you do not need to alter any of the data of the  "Masquerade"
port, because it is written so as to provide sensible defaults for its
settings.  Even so, you should open the CPX and save the settings,  so
they will be included in the STING.PRT file with data for other ports.

The settings include 2 purely local IP addresses, that are used in the
masking work.  Their defaults are  "10.0.255.0" and "10.0.255.1".  The
former is used to mask the  physical port,  while the latter is the IP
address of the Masquerade pseudo port itself. The defaults were chosen
as suggested by  Peter  Rottengatter,  because they can't exist on the
Internet.

Another setting is the max MTU size, with a default of 1500,  which is
a value that should work well with all providers.

Finally there is the choice of port to be masked, which you can set
to be the Modem port that you use.

NB: Let me emphasize again that at dial-up the settings of the Dialer
    will override any settings of the CPX, so you must also make sure
    to save settings into the DIAL.SCR file after editing them in the
    'Configs' dialog in the Dialer.


Once the system has been rebooted with proper 'Masque' setup, and dialer
has established an ISP connection, Masque will take partial control of
the selected port, acting as a filter between it and the internal STinG
functions.  Masque will also 'steal' the IP number of that port whenever
it changes, so dynamic IPs of all kinds should work fine.

Since Masque is a simulated port all data will pass through a physical
port too before reaching the internet, and the MTU value of both ports
should be identical for efficiency reasons and must of course _never_
exceed the maximum MTU value your ISP allows.


NB: An error simple to make is to use STNGPORT.CPX to manually activate
    Masquerade or the  Modem port it should interact with.  This is not
    the proper way to do it !!!  They should always be left passive, so
    for that reason you should never save STING.PRT while connected.
    The CPX  (and its STING.PRT file)  should only be used to  activate
    ports that are intended for LAN usage, not ISP dial-up connections.
    The dialer will activate those as needed when correctly configured.

    Note that the above rule applies even without Masquerade.  It is at
    all times the dialer that should activate any port used for dial-up
    conection to an ISP.

@endnode


@node "Masque : Installation"
Masque : Installation                                              STinG
@line 1 72 0 0 7

Please read the other sections of this document thoroughly before going on.

With this background I can now describe complete installation very simply:

1:  Copy MASQUE.STX to your STinG STX collection folder on the machine used
    for connecting to the Internet (usually the one with the fastest modem).

2:  Configure masquerading as described in the section  @{"Configuring Masque" link "Masque : Configuration"}

That's it...

@endnode


@node "Masque : Development History"
Masque : Development History                                       STinG
@line 1 72 0 0 7

@{U} Version 1.10	1998 January 13 @{0}

	Masking methods modified to allow local servers to be contacted
	by clients on the Internet.

	Hypertext was amended to describe usage with latest STinG.


@{U} Version 1.09	1997 October 25 @{0}

	Added module basepage pointer to DRIVER structure.
	This is a new standard defined to ease debugging.


@{U} Version 1.08	1997 September 7 @{0}

	Partial ICMP support added for 3 (of 6) message classes:

		Incoming error messages for UDP and TCP connections
		Outgoing ICMP requests (echo, timestamp, etc)
		Incoming ICMP replies (echo, timestamp, etc)

	The types now supported are sufficient for the normal PING
	and TRACEROUTE implementations, and tests with those tools
	as implemented both in the dialer and in separate programs
	in the  STinG  release verify this.  All these now work in
	the same way with Masquerade as they do without it.

	The following three message classes are not yet supported,
	and such packets will still merely be dropped and ignored:

		Outgoing error messages for UDP and TCP connections
		Incoming ICMP requests (echo, timestamp, etc)
		Outgoing ICMP replies (echo, timestamp, etc)

	Of those only the first is of any real interest, since the
	others will never occur on a normal ISP connection.

	Undefined/Future ICMP message types are also ignored, which
	is the recommended treatment of such enhancements when they
	can not be properly supported.

	The hypertext was reworked a bit for improved readability,
	and extended with some clues on how to set up a functional
	LAN, for those who are not yet familiar with this aspect
	of STinG.  (Suggested by beta tester Eabe Kuik.)


@{U} Version 1.07	1997 August 21 @{0}

	Port illegality test added, as suggested by Peter


@{U} Version 1.06	1997 August 21 @{0}

	Change of default IP numbers, as suggested by Peter


@{U} Version 1.05	1997 August 20 @{0}

	Bug correction of mislinked masquerade queues


@{U} Version 1.04	1997 August 19 @{0}

	Update for longer port name "Masquerade" requested by Peter


@{U} Version 1.03	1997 August 18 @{0}

	Update for new STinG port type implemented by Peter in
	STNGPORT.CPX and Dialer.


@{U} Version 1.02	1997 August 18 @{0}

	Update for new configuration method suggested by Peter.
	Documentation converted to hypertext.


@{U} Version 1.01	1997 August 14 @{0}

	Update for unblocking time limitation on mask/unmask work


@{U} Version 1.00	1997 August 12 @{0}

	First functional release (to me and Peter only)


@{U} Version 0.xx	1997 August 10-12 @{0}

	Project start and various pre-release experiments

@endnode


@node "TCP.STX : Transmission Control Protocol"
TCP.STX : Transmission Control Protocol                            STinG
@line 1 72 0 0 7


@endnode


@node "UDP.STX : User Datagram Protocol"
UDP.STX : User Datagram Protocol                                   STinG
@line 1 72 0 0 7


@endnode


@node "RESOLVE.STX : The DNS-Resolver"
RESOLVE.STX : The DNS-Resolver                                     STinG
@line 1 72 0 0 7

 Documentation for Resolve.Stx version 1.06
 Created by Ulf Ronald Andersson

 @{U}Contents@{0}

 @{"Introduction to the DNS-Resolver" link "Resolver : Introduction"}
 @{"Resolver Command List" link "Resolver : Command List"}
 @{"Resolver Development History" link "Resolver : Development History"}
 @{"Resolver Feedback" link "Credits and Copyright"}

@endnode


@node "Resolver : Introduction"
Resolver : Introduction                                            STinG
@line 1 72 0 0 7

Most TCP/IP client programs allow the user to type in IP addresses in the form
of symbolic domain names or numeric (dotted IP) addresses. These are then used
as an argument in calling the resolver module to gain the missing information.
By using a command syntax  illegal for either  symbolic or  numeric addresses,
my resolver module allows such interfaces to be used for commands as well.

The recommended method to use these commands is to do so through the 'Resolve'
tool of the STinG dialer program written by  Peter  Rottengatter.  Using other
client interfaces should also work but may have side effects in those programs.
(Usually causing connection attempts to the IP addresses of stored entries.)

All command keywords begin and end with square brackets ('[' and ']'), and any
unknown sequence starting with a left square bracket will have no effect,  but
will cause the resolver to return the  error code 'E_CANTRESOLVE'.  That  code
will also be returned for any commands that fail, regardless of actual causes.

The reason for this is that some clients test for that error code only.  These
would attempt to use some garbage data if I use another error code, with bombs
resulting from that attempt.  All successful commands will resolve some  cache
entry on completion, to provide a visible indication of the success.  The only
exceptions are [FIRST] and [NEXT] when used so as to get a nonexistent entry.
That will naturally return E_CANTRESOLVE, though there was no real failure.

Blank characters (Tabs and spaces) will be ignored both around and between all
keywords, arguments and separators, but may not be used within such units.

NB: Here period signs ('.') are not considered as unit separators, but rather
    as operators, building full addresses and names from substrings.  Domain
    names and dotted IP numbers are not allowed any internal blanks.
    The only separators currently defined are '=' and ':'

Within the square brackets of a command character case is neither preserved
nor significant, so "[LOAD]" does the same as "[load]" or even "[LoAd]" etc.

@endnode


@node "Resolver : Command List"
Resolver : Command List                                            STinG
@line 1 72 0 0 7

Command list:		Six commands are defined at present

[LOAD]		no argument	Loads the CACHE.DNS file into RAM from disk
[SAVE]		no argument	Saves the CACHE.DNS file from RAM onto disk
[FIRST]		no argument	Resolves the root entry of DNS RAM cache
[NEXT]		no argument	Resolves the next entry of DNS RAM cache
[CNAME]	arg1 = arg2 : arg3	Defines a canonical domain name for an IP
[ALIAS] arg1 = arg2 : arg3	Defines an alias domain name for an IP

The last two commands have identical syntax and the meaning of argument is:

arg1	The domain name.	eg: hugin.oden.se	(My ISP's main server)
arg2	The dotted IP.		eg: 193.45.240.2	(IP number of the same)
arg3	Time To Live (seconds)	eg: 172800		(valid for two days)

The TTL entry and the preceding ':' are optional, and if excluded a default of
10 years will be used. This is intended for entry of semi-permanent IP numbers
on your local networks, and  allows fully symbolic addresses to be used on any
small  intranet as well as on internet.  No nameserver is needed for this, and
that is important since none is available under TOS as yet.

NB: In order to define an alias, you must *FIRST* define the canonical name of
    that IP number.  Aliases are linked in via the canonical entries, so those
    must exist first.  (This is handled automatically for network queries.)

The two commands [FIRST] and [NEXT] can be used to scan through all entries of
the cache since E_CANTRESOLVE is returned as the end of the cache is reached.

For technical reasons FIRST here means the latest defined CNAME, and the last
entry will be the oldest ALIAS of the oldest CNAME, or that CNAME itself if
the oldest one does not have any aliases.  This is how the cache is organized,
and the scanning order follows this pattern consistently.  Thus aliases are
defined relative to their CNAME, and the order in which they were defined
also relates only to the other aliases of the same CNAME.

Command results as returned to the resolving client program:

keyword		Results
-------		-------
[LOAD]		Resolves the 'root' entry of successfully loaded cache
[SAVE]		Resolves the 'current' entry of the cache on successful save
[FIRST]		Resolves the 'root' entry of the cache, unless it is empty
[NEXT]		Resolves the 'next' entry of the cache, unless already at end
[CNAME]		Resolves the entry defined, if that succeeds
[ALIAS]		Resolves the entry defined, if that succeeds

NB: For safety reasons given in the introduction, all failures of the commands
    will be returned to the calling client as the error code  'E_CANTRESOLVE'.
    That is the only code which ensures that no erroneous data will be used as
    if it was valid, which could lead to 'bombs'.

NB: Since most clients will attempt to make some use of each resolved address,
    I strongly suggest that only the STinG dialer's 'Resolve' tool be used to
    enter the commands.  That is the only client I know of which will never
    use the so resolved addresses on the network.

@endnode


@node "Resolver : Development History"
Resolver : Development History                                     STinG
@line 1 72 0 0 7

Version		Major changes from last version
-------		-------------------------------

  1.06		Modified [NEXT] to recognize cache end in user scans
97.09.24	Fixed bug returning E_NOMEM on RAM error to use E_CANTRESOLVE
		Fixed bomber bug in cache that struck ALIASes without CNAMEs
		Added multiple IP return to network DNS queries
		Added multiple caching for DNS queries with multiple results
		Added multiple IP return to DNS cache queries
		Added ICMP error message response, so all LAN machines notice
		  when DNS requests to ISP fail due to offline state

  1.05		Removed case sensitivity from command word interpreter
97.09.12	Restructured some caching code

  1.04		Fixed some command bugs
97.08.06	Fixed some caching bugs
		Changed local name ttl default to eternity, to avoid losing
		  entries when starting without proper time set.

  1.03		First proper release
97.06.??	Implemented cache commands
		Fixed various bugs
		Restructured some DNS query code

  1.02		First functional version
97.05.??	Combined caching with network queries
		Implemented UDP retries with TCP fallback
		
 0.00-1.01	Early experimental versions, first by Peter then later by me
  various	These included separately developed code for network queries
		and for the basic cache system (still largely retained).

@endnode

